//stream.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.5.1
// source: mq.proto

package protoMq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mq_PushData_FullMethodName = "/Mq/PushData"
	Mq_PullData_FullMethodName = "/Mq/PullData"
)

// MqClient is the client API for Mq service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MqClient interface {
	PushData(ctx context.Context, opts ...grpc.CallOption) (Mq_PushDataClient, error)
	PullData(ctx context.Context, in *ReqPullData, opts ...grpc.CallOption) (Mq_PullDataClient, error)
}

type mqClient struct {
	cc grpc.ClientConnInterface
}

func NewMqClient(cc grpc.ClientConnInterface) MqClient {
	return &mqClient{cc}
}

func (c *mqClient) PushData(ctx context.Context, opts ...grpc.CallOption) (Mq_PushDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mq_ServiceDesc.Streams[0], Mq_PushData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mqPushDataClient{stream}
	return x, nil
}

type Mq_PushDataClient interface {
	Send(*ReqPushData) error
	Recv() (*ResPushData, error)
	grpc.ClientStream
}

type mqPushDataClient struct {
	grpc.ClientStream
}

func (x *mqPushDataClient) Send(m *ReqPushData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mqPushDataClient) Recv() (*ResPushData, error) {
	m := new(ResPushData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mqClient) PullData(ctx context.Context, in *ReqPullData, opts ...grpc.CallOption) (Mq_PullDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mq_ServiceDesc.Streams[1], Mq_PullData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mqPullDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mq_PullDataClient interface {
	Recv() (*ResPullData, error)
	grpc.ClientStream
}

type mqPullDataClient struct {
	grpc.ClientStream
}

func (x *mqPullDataClient) Recv() (*ResPullData, error) {
	m := new(ResPullData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MqServer is the server API for Mq service.
// All implementations must embed UnimplementedMqServer
// for forward compatibility
type MqServer interface {
	PushData(Mq_PushDataServer) error
	PullData(*ReqPullData, Mq_PullDataServer) error
	mustEmbedUnimplementedMqServer()
}

// UnimplementedMqServer must be embedded to have forward compatible implementations.
type UnimplementedMqServer struct {
}

func (UnimplementedMqServer) PushData(Mq_PushDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PushData not implemented")
}
func (UnimplementedMqServer) PullData(*ReqPullData, Mq_PullDataServer) error {
	return status.Errorf(codes.Unimplemented, "method PullData not implemented")
}
func (UnimplementedMqServer) mustEmbedUnimplementedMqServer() {}

// UnsafeMqServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MqServer will
// result in compilation errors.
type UnsafeMqServer interface {
	mustEmbedUnimplementedMqServer()
}

func RegisterMqServer(s grpc.ServiceRegistrar, srv MqServer) {
	s.RegisterService(&Mq_ServiceDesc, srv)
}

func _Mq_PushData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MqServer).PushData(&mqPushDataServer{stream})
}

type Mq_PushDataServer interface {
	Send(*ResPushData) error
	Recv() (*ReqPushData, error)
	grpc.ServerStream
}

type mqPushDataServer struct {
	grpc.ServerStream
}

func (x *mqPushDataServer) Send(m *ResPushData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mqPushDataServer) Recv() (*ReqPushData, error) {
	m := new(ReqPushData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Mq_PullData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqPullData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MqServer).PullData(m, &mqPullDataServer{stream})
}

type Mq_PullDataServer interface {
	Send(*ResPullData) error
	grpc.ServerStream
}

type mqPullDataServer struct {
	grpc.ServerStream
}

func (x *mqPullDataServer) Send(m *ResPullData) error {
	return x.ServerStream.SendMsg(m)
}

// Mq_ServiceDesc is the grpc.ServiceDesc for Mq service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mq_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Mq",
	HandlerType: (*MqServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushData",
			Handler:       _Mq_PushData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PullData",
			Handler:       _Mq_PullData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mq.proto",
}
